{% assign products_json = shop.metafields.your_namespace.shop_product_details %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- Include Slick CSS and JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css"/>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.js"></script>

<!-- Product List Container -->
<div class="upsell-products slick-slider" id="product-list"></div>
<style>
    .upsell-submit-button{
        letter-spacing : 0;
    }
    /* Basic styles for the product grid */
    .slick-prev:before ,.slick-next:before{
        color: #484848;
        font-size: 30px;
    }
    .slick-prev {
    left: -10px;
    z-index: 1;
}
.slick-next {
    right: 0px;
}
.slick-initialized .slick-slide{
    padding: 5px;
}

    .upsell-product {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 16px;
        text-align: center;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        width: 200px; /* Set a fixed width for each product */
        height: 100%; /* Ensure it takes full height */
        min-height: 350px; /* Optional: Set a minimum height */
        box-sizing: border-box; /* Include padding in the width/height */
    }

    /* Ensure the image is the same size across all products */
    .upsell-product img {
        width: 100%;
        height: 150px;
        object-fit: cover;
        border-radius: 8px;
    }

    /* Title Styling */
    .upsell-product h2 {
        margin: 10px 0 5px 0;
        font-size: 16px;
        font-weight: bold;
        line-height: 1.3;
        text-align: center;
        flex-grow: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 3em; /* Consistent height for titles */
    }

    /* Price Styling */
    .upsell-product p {
        margin: 10px 0;
        font-size: 14px;
    }

    /* Variant Select Dropdown */
    .variant-select {
        margin-top: 10px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 100%;
    }

    /* Add to Cart Button Styling */
    .add-to-cart {
        background-color: #007bff;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 10px;
        transition: background-color 0.3s;
    }

    .add-to-cart:hover {
        background-color: #0056b3;
    }

    /* Ensure each section of the product has consistent margins */
    .upsell-product div,
    .upsell-product img,
    .upsell-product h2,
    .upsell-product p,
    .upsell-product .variant-select,
    .upsell-product .add-to-cart {
        margin-bottom: 10px;
    }

    /* Ensure uniform height across all products by aligning elements */
    .upsell-product-form {
        margin-top: auto; /* Push the form to the bottom to ensure alignment */
    }
</style>

<script>
    // Convert the Liquid variable to a JSON string properly
    var productsJson = '{{ products_json | escape | strip_newlines }}';

    function fetchCartData(callback) {
        fetch('/cart.js') // or you can use '/cart.json'
            .then(response => response.json())
            .then(cart => {
                // Log cart for debugging
                console.log("Cart Data:", cart);
                
                // Call the callback with the cart data
                callback(cart);
            })
            .catch(error => {
                console.error('Error fetching cart data:', error);
            });
    }

    // Try to parse the JSON string
    function renderMetafieldProducts() {
        try {
            // Decode HTML entities if needed
            productsJson = decodeHtmlEntities(productsJson);

            // Now parse the JSON string
            var products = JSON.parse(productsJson); // Ensure it is valid JSON
            
            // Log the parsed products
            console.log("Parsed Products:", products);

            var metafieldProductsDiv = document.createElement('div');
            metafieldProductsDiv.className = 'metafield-products';

            // Create the heading
            var heading = document.createElement('h2');
            heading.textContent = 'Recommended Products';
            metafieldProductsDiv.appendChild(heading);

            // Preselected variant ID (for example: "44409706184889")
            var upsellProductList = document.createElement('div');
            upsellProductList.className = 'upsell-products';
            upsellProductList.id = 'upsell-product-list';
            metafieldProductsDiv.appendChild(upsellProductList);

            // Iterate over the products and display them
            products.forEach(function(product) {
                // Create a div for each product
                var productDiv = document.createElement('div');
                productDiv.className = 'upsell-product';
                productDiv.id = 'upsell-product-' + product.id.split('/').pop();

                // Preselected variant logic
                var selectedVariantId = product.variants[0].id.split('/').pop();

                // Generate variant options with only the number as the value
                var variantOptions = product.variants.map(function(variant) {
                    var variantNumber = variant.id.split('/').pop(); // Extract the number part from the variant ID
                    var isSelected = (variantNumber === selectedVariantId) ? 'selected' : ''; // Check if it is the selected variant
                    return `<option value="${variantNumber}" ${isSelected}>${variant.varaint_title}</option>`;
                }).join('');

                // Create product title, description, image, and "Add to Cart" button with form
                productDiv.innerHTML = `
                    <img src="${product.image}" alt="${product.title}">
                    <h2 style="margin: 0;">${product.title}</h2>
                    <p style="margin: 0;">Price: $${product.price}</p>
                    <select class="variant-select" id="variant-select-${product.id.split('/').pop()}">
                        ${variantOptions}
                    </select><br>
                   <product-form class="product-form" data-hide-errors="false">
      <div class="product-form__error-message-wrapper" role="alert" hidden="">
        <svg aria-hidden="true" focusable="false" class="icon icon-error" viewBox="0 0 13 13">
          <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"></circle>
          <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"></circle>
          <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"></path>
          <path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z" fill="white" stroke="#EB001B" stroke-width="0.7">
        </path></svg>
        <span class="product-form__error-message"></span>
      </div>


        <form method="post" action="/cart/add" id="product-form-${product.id.split('/').pop()}"  accept-charset="UTF-8" class="form" enctype="multipart/form-data" novalidate="novalidate" data-type="add-to-cart-form"><input type="hidden" name="form_type" value="product"><input type="hidden" name="utf8" value="âœ“"><input type="hidden" name="id" value="${selectedVariantId}" class="upsell-product-variant-id"><div class="product-form__buttons" bis_skin_checked="1"><button id="ProductSubmitButton-${product.id.split('/').pop()}" type="submit" name="add" class="product-form__submit upsell-submit-button button button--full-width button--primary" aria-haspopup="dialog">
            <span>Add to cart
</span>

<link href="//demo-new-shopping.myshopify.com/cdn/shop/t/1/assets/component-loading-spinner.css?v=116724955567955766481710142515" rel="stylesheet" type="text/css" media="all">

<div class="loading__spinner hidden" bis_skin_checked="1">
  <svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
    <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
  </svg>
</div>
</button></div><input type="hidden" name="product-id" value="${product.id.split('/').pop()}"></form>
        </product-form>
                `;

                // Append the product div to the container
                // productListContainer.appendChild(productDiv);
                upsellProductList.appendChild(productDiv);
                console.log("gett1",'variant-select-' + product.id.split('/').pop())

                // Add event listener to update hidden input when variant changes
                setTimeout(() => {
                var variantSelect = document.getElementById('variant-select-' + product.id.split('/').pop());
                console.log("gettt",variantSelect)
                
                // Update the hidden input when the variant is selected
                if(variantSelect){
                    variantSelect.addEventListener('change', function() {
                        var newSelectedVariantId = variantSelect.value;
                        productDiv.querySelector('.upsell-product-variant-id').value = newSelectedVariantId; // Update hidden input value with the selected variant
                    });
                }
},1000)
            });
            var cartDrawer = document.getElementById('CartDrawer');
            var cartPage = document.querySelector('.cart-page'); // Assuming cart page has this class

            // Append products based on whether we are in cart drawer or cart page
            if (cartDrawer) {
                var cartDrawerItems = cartDrawer.querySelector('cart-drawer-items');
                if (cartDrawerItems) {
                    cartDrawerItems.after(metafieldProductsDiv);
                } else {
                    cartDrawer.appendChild(metafieldProductsDiv);
                }
            } else if (cartPage) {
                // Append to cart page after the cart-items element
                var cartItems = document.querySelector('.cart-items');
                if (cartItems) {
                    cartItems.after(metafieldProductsDiv);
                } else {
                    console.error("Cart items element not found in the cart page!");
                }
            } else {
                console.error("CartDrawer or CartPage not found!");
            }

            // Initialize Slick Slider
            initializeSlickSlider();

        } catch (error) {
            console.error("Error parsing JSON:", error);
        }
    }

    // Function to decode HTML entities
    function decodeHtmlEntities(str) {
        var txt = document.createElement("textarea");
        txt.innerHTML = str;
        return txt.value;
    }

    // Initialize Slick Slider
    function initializeSlickSlider() {
        $('#upsell-product-list').slick({
            infinite: true,
            slidesToShow: 2,
            slidesToScroll: 1,
            autoplay: false,
            autoplaySpeed: 3000,
            arrows: true,
            responsive: [
                {
                    breakpoint: 1024,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 1,
                    }
                },
                {
                    breakpoint: 768,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                    }
                },
                {
                    breakpoint: 480,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 1,
                    }
                }
            ]
        });
    }

    // Check if cart is non-empty before rendering
    function checkCartAndRenderProducts() {
        fetchCartData(function(cart) {
            if (cart.item_count > 0) {
                renderMetafieldProducts();
            } else {
                console.log("Cart is empty, not displaying recommended products.");
            }
        });
    }

    // Ensure products are rendered when the DOM is fully loaded
    document.addEventListener('DOMContentLoaded', function() {
        checkCartAndRenderProducts();
    });

    // Reinitialize slider after add to cart actions
    document.addEventListener('click', function(event) {
        if (event.target.matches('.product-form__submit')) {
            setTimeout(() => {
                checkCartAndRenderProducts();
                initializeSlickSlider();
            }, 2000);
        }
        if (event.target.matches('.cart-remove-button')) {
            setTimeout(() => {
                checkCartAndRenderProducts();
                initializeSlickSlider();
            }, 2000);
        }
    });
</script>



{% schema %}
{
  "name": "Star Rating",
  "target": "body",
  "stylesheet": "custom.css",
  "settings": [
    { "type": "product", "id": "product", "label": "Product", "autofill": true },
    { "type": "color", "id": "colour", "label": "Star Colour", "default": "#ff0000" }
  ]
}
{% endschema %}
